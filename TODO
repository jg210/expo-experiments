* Implement a turbo module
  - does logging configuration patch do anything?
  - native android unit test
  - native iOS unit test

* The android expo module has junit as an api dependency
  - should be testImplementation

* Rename expo native module and turbomodules
  - FingerprintExpo and FingerprintTurbo

* Execute fingerprint algorithms asynchronously (on background thread).

* Try out nitro modules
  - js string[] becomes List<String> in kotlin, not a ReadableArray
  - nitrogen not run automatically though...

* Crash reporting tool
  - enabled on CI, so can get more usable iOS crash reports there more easily

* Wait for android emulator to become ready.
  - https://github.com/jg210/expo-experiments/pull/11#issuecomment-2749418366

* cache cocoapod files
  - ~/.cocoapods and ~/Library/Caches/CocoaPods/Pods
  - can't use Podfile.lock to cache ios/Pods/ since prebuild creates it and runs pod install
  - only small part of job time c.f. build...

* iOS objective C source code files should have three-letter prefix.

* xcpretty
  - xcbeautify is maybe better than xcpretty?
    - https://docs.fastlane.tools/best-practices/xcodebuild-formatters/
  - is xcpretty available?
    - would a GemFile be required?
    - already have https://www.npmjs.com/package/@expo/xcpretty
      - use this?

* Move CrashTests buttons into own UI tab
  - configure sentry to record tab changes

* Storybook screenshot tests

* iOS screen layout extends into top of screen despite use of SafeAreaView.

* maestro --debug-output could be used to avoid date in log path
  => can save maestro logs on CI without zipping them?
    - excluding from or duplicating in a zip with all the files

* A with_environment script for use in checks.yaml.

* Store master-branch apks as GitHub Actions releases.

* Add a turbomodule too, to compare with the expo native module.

* Use full width of device screen.

* Nicer refresh UI?

* Avoid duplication between GitHub Actions jobs. 

* dorny/test-reporter for android gradle test results.

* Run eas build on github actions too?
  - likely faster than using eas build directly.

* Mock data in e2e tests
  - currently rely on FSA data remaining stable
    - not too risky currently, and does ensure it really works
  - could allow app to be started with fake data
    - Intent extra / iOS command-line argument
    - not allowing arbitrary URL to be substituted in production builds (security risk).
    - a build variant just for tests
      - variants cost lots in terms of build times etc.
      - not what would ship
    - allow fake data in production, but it's fixed and baked into the app?

* Migrate to eslint 9
  - need to migrate configuration file format
    - https://eslint.org/docs/latest/use/configure/migration-guide

* Try out https://docs.expo.dev/guides/react-compiler/

* Run expo-doctor on CI?

* iOS implementation for fingerprintAuthorities.

* Contribute something to eas build that lets it parse .node-version so don't need to specify in eas.json?

* Is it possible to test that react-hooks/exhaustive-deps checks useLastPromise?

* cache maestro installation files on GitHub Actions?
  - little point, since downloaded from GitHub release, so as fast as caching files.

* reactivecircus/android-emulator-runner@v2 doesn't version emulator tool or AVD base image
  - it has an emulator-build parameter for versioning the tool
    - maintainging build number to use could be awkward

* Test on minSdkVersion=21
  - https://github.com/mobile-dev-inc/maestro/issues/1207 prevented this

* Remove workaround for assertVisible with text and id
  - https://github.com/mobile-dev-inc/Maestro/issues/1404

* Try out spotlight from sentry?
  - enable spotlight in App.tsx
