* Run maestro tests on github actions for iOS.

* Store apks as GitHub Actions releases.

* Warning: No files were found with the provided path: node_modules/expo-dev-launcher/android/build/reports/tests/testDebugUnitTest/. No artifacts will be uploaded.

* Add a turbomodule too, to compare with the expo native module.

* End-to-end test
  - https://docs.expo.dev/build-reference/e2e-tests/
    - need to use legacy mode, so maybe not...
  - https://github.com/marketplace/actions/android-emulator-runner?

* Nicer refresh UI?

* dorny/test-reporter for android gradle test results.

* Run eas build on github actions too?
  - likely faster than using eas build directly.

* Expo prevents use of eslint 9: https://github.com/expo/expo/issues/28144. eslint 8 is no longer maintained.

* eslint react-hooks/exhaustive-deps disabled.

* Try out https://docs.expo.dev/guides/react-compiler/

* Run expo-doctor on CI?

* iOS implementation for fingerprintAuthorities.

* Contribute something to eas build that lets it parse .node-version so don't need to specify in eas.json?

* Is it possible to test that react-hooks/exhaustive-deps checks useLastPromise?

* cache maestro installation files on GitHub Actions?
  - little point, since downloaded from GitHub release, so as fast as caching files.
